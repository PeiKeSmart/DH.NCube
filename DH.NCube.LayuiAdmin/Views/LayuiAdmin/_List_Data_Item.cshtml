@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@using NewLife;
@using Microsoft.AspNetCore.Routing
@using XCode;
@using XCode.Configuration;
@{
    var fact = ViewBag.Factory as IEntityFactory;
    var pair = (ValueTuple<IEntity, DataField>)Model;
    var entity = pair.Item1;
    var item = pair.Item2;
    var factory = entity.GetType().AsFactory();

    var value = entity[item.Name];
    var provider = ManageProvider.Provider;

    // 第二名称，去掉后面的数字，便于模式匹配
    var digits = new[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };
    var name2 = item.Name.TrimEnd(digits);
    var set = ViewBag.PageSetting as PageSetting ?? PageSetting.Global;
    var ukey = fact.Unique;
}
@if (item.PrimaryKey)
{
    @*    @if (set.EnableSelect && ukey != null)
    {
        <td lay-data="{checkbox:true}"></td>
    }*@
    <td>@value</td>
}
else
{
    switch (Type.GetTypeCode(item.Type))
    {
        case TypeCode.Boolean:
            var bval = (Boolean)value;
            <td>
                @if (item.Name.EqualIgnoreCase("Enable") && factory.Unique != null)
                {
                    var key = entity[factory.Unique.Name];
                    var df = item as ListField;
                    <a lay-event="action" data-action="action" lay-data="@Url.Action("SetEnable",null,new { id=key, enable=!bval })">
                        @await Html.PartialAsync("_Icon_Boolean", bval)
                    </a>
                }
                else
                {
                    @await Html.PartialAsync("_Icon_Boolean", bval)
                }
            </td>
            break;
        case TypeCode.DateTime:
            var dt = (DateTime)value;
            if (name2.EndsWith("Date"))
            {
                <td>@dt.ToString("yyyy-MM-dd", "")</td>
            }
            else
            {
                <td>@dt.ToFullString("")</td>
            }
            break;
        case TypeCode.Decimal:
            var dc = (Decimal)value;
            <td>@dc.ToString("n2")</td>
            break;
        case TypeCode.Single:
        case TypeCode.Double:
            if (name2.EndsWith("Rate") || name2.EndsWith("Ratio") || item.ItemType.EqualIgnoreCase("percent", "Percentage"))
            {
                var dd = value.ToDouble();
                var des = item.Description + "";
                if (des.Contains("十分之一")) { dd /= 10; }
                if (des.Contains("百分之一")) { dd /= 100; }
                if (des.Contains("千分之一")) { dd /= 1000; }
                if (des.Contains("万分之一")) { dd /= 10000; }

                <td>@dd.ToString("p2")</td>
            }
            else
            {
                var dd = value.ToDouble();
                <td>@dd.ToString()</td>
            }
            break;
        case TypeCode.Byte:
        case TypeCode.Int16:
        case TypeCode.Int32:
        case TypeCode.Int64:
        case TypeCode.UInt16:
        case TypeCode.UInt32:
        case TypeCode.UInt64:
            //特殊处理枚举
            if (item.Type.IsEnum)
            {
                var val = "";
                try
                {
                    val = EnumHelper.GetDescription((Enum)value) ?? value + "";
                }
                catch { }
                <td>@val</td>
            }
            else if (item.Name.EqualIgnoreCase("CreateUserID", "UpdateUserID"))
            {
                //var provider = ViewData["Provider"] as IManageProvider;
                if (provider != null)
                {
                    <td>@provider?.FindByID(value)</td>
                }
                else
                {
                    <td>@value</td>
                }
            }
            else if (name2.EndsWith("Rate") || name2.EndsWith("Ratio"))
            {
                var dd = Convert.ToDouble(value);
                var des = item.Description + "";
                if (des.Contains("十分之一")) { dd /= 10; }
                if (des.Contains("百分之一")) { dd /= 100; }
                if (des.Contains("千分之一")) { dd /= 1000; }
                if (des.Contains("万分之一")) { dd /= 10000; }

                <td>@dd.ToString("p2")</td>
            }
            else
            {
                <td>@Convert.ToInt64(value).ToString("n0")</td>
            }
            break;
        case TypeCode.String:
        default:
            {
                var val = value;
                if (!item.MapField.IsNullOrEmpty() && val + "" != "")
                {
                    if (item.MapProvider != null)
                    {
                        var name = item.MapProvider.EntityType.Name;
                        var key = item.MapProvider.Key;
                        val = entity[item.MapField];
                        <td><a href="@name/Detail/@key=@val" class="layui-btn layui-btn-primary layui-btn-xs">@value</a></td>
                    }
                    else
                    {
                        <td>@value</td>
                    }
                }
                else if (item.Name.EqualIgnoreCase("CreateIP", "UpdateIP"))
                {
                    <td title="@((value+"").IPToAddress())">@value</td>
                }
                else if (item.IsBigText())
                {
                    //防止内容过长
                    <td style="max-width:600px;overflow:hidden;white-space: nowrap;text-overflow: ellipsis;" title="@value">@value</td>
                }
                else
                {
                    <td>@value</td>
                }
            }
            break;
    }
}
